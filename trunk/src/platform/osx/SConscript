# ----------------------------------------------------------------------------
#
#   enso_osx.graphics SConscript
#
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Imports
# ----------------------------------------------------------------------------

Import( "env" )

import os
import sys
import subprocess


# ----------------------------------------------------------------------------
# Helper Functions
# ----------------------------------------------------------------------------

def getOutput( params ):
    """
    Runs the given program, as specified by the parameter list.  Raises an
    exception with stderr output if the process has a nonzero return
    code.  Otherwise, it returns the stdout of the process as a string.
    """

    popen = subprocess.Popen( params,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE )
    output, errors = popen.communicate()
    if popen.returncode != 0:
        sys.stderr.write( "Running '%s' failed.\n" % " ".join(params) )
        sys.stderr.write( "Output was:\n%s\n(end of output)\n" % errors )
        raise SystemError()
    return output


# ----------------------------------------------------------------------------
# Build Actions
# ----------------------------------------------------------------------------

# cairo

# Ideally, this would be integrated into this SCons build process, but
# I ran into some unexpected dependency issues, so I'm just calling a
# separate SCons instance. -AV

import subprocess
print "Building cairo..."
retval = subprocess.call(["scons"], cwd=Dir("cairo").abspath)
if retval != 0:
    raise Exception("Building cairo failed.")
print "Done."

env.Append(
    CPPPATH = [Dir("cairo/cairo-1.6.4-dist/include/cairo")],
    LIBPATH = [Dir("cairo/cairo-1.6.4-dist/lib")]
    )

# Flag needed for Python C extension modules, so that missing
# Python symbols are looked-up (and found) when the module is loaded.
FIND_MISSING_SYMS_AT_RUNTIME_FLAGS = ["-undefined", "dynamic_lookup"]

# quartz cairo bridge

qcbEnv = env.Copy()

qcbEnv.Append(
    CPPPATH=["pycairo"],
    LINKFLAGS=FIND_MISSING_SYMS_AT_RUNTIME_FLAGS,
    LIBS=["cairo"],
    FRAMEWORKS=["AppKit"],
    )

quartzCairoBridge = qcbEnv.LoadableModule(
    source = ["quartz_cairo_bridge.m"],
    target = ["quartz_cairo_bridge.so"],
    )

qcbEnv.Install( "#enso/platform/osx", quartzCairoBridge )

# key notifier

keyNotifier = env.Program(
    source = ["EnsoKeyNotifier.m"],
    FRAMEWORKS = ["ApplicationServices", "Foundation"]
    )

env.Install( "#bin", keyNotifier )

# key utils

keyUtils = env.LoadableModule(
    source = ["key_utils.m"],
    target = ["key_utils.so"],
    FRAMEWORKS = ["ApplicationServices"]
    )

env.Install( "#enso/platform/osx/selection", keyUtils )

# Pycairo

pycairoEnv = env.Copy()

pycairoEnv.Append( LINKFLAGS=FIND_MISSING_SYMS_AT_RUNTIME_FLAGS )

# Pycairo may raise warnings, and that's okay--it's not our code.
pycairoEnv["CCFLAGS"].remove( "-Werror" )

SConscript( "pycairo/SConscript", exports="pycairoEnv" )
